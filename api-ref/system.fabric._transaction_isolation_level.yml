items:
- uid: system.fabric._transaction_isolation_level
  id: _transaction_isolation_level
  parent: system.fabric
  children:
  - system.fabric._transaction_isolation_level.Default()
  - system.fabric._transaction_isolation_level.getValue()
  - system.fabric._transaction_isolation_level.ReadCommitted()
  - system.fabric._transaction_isolation_level.ReadUncommitted()
  - system.fabric._transaction_isolation_level.RepeatableRead()
  - system.fabric._transaction_isolation_level.Serializable()
  - system.fabric._transaction_isolation_level.Snapshot()
  href: system.fabric._transaction_isolation_level.yml
  langs:
  - java
  name: TransactionIsolationLevel
  fullName: system.fabric.TransactionIsolationLevel
  type: Enum
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/TransactionIsolationLevel.java
      branch: release_linux_5.3
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/TransactionIsolationLevel.java
    startLine: 5
  package: system.fabric
  summary: <p>Enumerates the set of possible isolation levels for a <xref href="system.fabric._transaction" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public enum TransactionIsolationLevel
  inheritance:
  - java.lang.Object
  - java.lang.Enum<TransactionIsolationLevel>
- uid: system.fabric._transaction_isolation_level.Default()
  id: Default()
  parent: system.fabric._transaction_isolation_level
  href: system.fabric._transaction_isolation_level.yml
  langs:
  - java
  name: Default
  fullName: system.fabric.TransactionIsolationLevel.Default
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/TransactionIsolationLevel.java
    startLine: 9
  package: system.fabric
  summary: <p>Indicates the default isolation level of the store. </p>
  syntax:
    content: public Default=(0)
- uid: system.fabric._transaction_isolation_level.getValue()
  id: getValue()
  parent: system.fabric._transaction_isolation_level
  href: system.fabric._transaction_isolation_level.yml
  langs:
  - java
  name: getValue()
  fullName: int system.fabric.TransactionIsolationLevel.getValue()
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/TransactionIsolationLevel.java
    startLine: 44
  package: system.fabric
  syntax:
    content: public int getValue()
    return:
      type: f75371fa
- uid: system.fabric._transaction_isolation_level.ReadCommitted()
  id: ReadCommitted()
  parent: system.fabric._transaction_isolation_level
  href: system.fabric._transaction_isolation_level.yml
  langs:
  - java
  name: ReadCommitted
  fullName: system.fabric.TransactionIsolationLevel.ReadCommitted
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/TransactionIsolationLevel.java
    startLine: 18
  package: system.fabric
  summary: <p>Indicates that volatile data cannot be read during the transaction, but can be modified. Shared locks are held while data is being read to avoid dirty reads, but data can be changed before the end of the transaction that results in non-repeatable reads or phantom data. </p>
  syntax:
    content: public ReadCommitted=(2)
- uid: system.fabric._transaction_isolation_level.ReadUncommitted()
  id: ReadUncommitted()
  parent: system.fabric._transaction_isolation_level
  href: system.fabric._transaction_isolation_level.yml
  langs:
  - java
  name: ReadUncommitted
  fullName: system.fabric.TransactionIsolationLevel.ReadUncommitted
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/TransactionIsolationLevel.java
    startLine: 13
  package: system.fabric
  summary: <p>Indicates that volatile data can be read during the transaction. </p>
  syntax:
    content: public ReadUncommitted=(1)
- uid: system.fabric._transaction_isolation_level.RepeatableRead()
  id: RepeatableRead()
  parent: system.fabric._transaction_isolation_level
  href: system.fabric._transaction_isolation_level.yml
  langs:
  - java
  name: RepeatableRead
  fullName: system.fabric.TransactionIsolationLevel.RepeatableRead
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/TransactionIsolationLevel.java
    startLine: 23
  package: system.fabric
  summary: <p>Indicates that volatile data can be read but not modified during the transaction. Locks are placed on all data that is used in a query to prevent other users from updating data. New rows can be inserted into data sets and are included in later reads in the current transaction. </p>
  syntax:
    content: public RepeatableRead=(3)
- uid: system.fabric._transaction_isolation_level.Serializable()
  id: Serializable()
  parent: system.fabric._transaction_isolation_level
  href: system.fabric._transaction_isolation_level.yml
  langs:
  - java
  name: Serializable
  fullName: system.fabric.TransactionIsolationLevel.Serializable
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/TransactionIsolationLevel.java
    startLine: 33
  package: system.fabric
  summary: <p>Indicates that volatile data are serializable. Volatile data can be read but not modified, and no new data can be added during the transaction. Indicates that range locks will be put on data sets. The locks prevent updates or inserts in data sets until the transaction finishes. </p>
  syntax:
    content: public Serializable=(5)
- uid: system.fabric._transaction_isolation_level.Snapshot()
  id: Snapshot()
  parent: system.fabric._transaction_isolation_level
  href: system.fabric._transaction_isolation_level.yml
  langs:
  - java
  name: Snapshot
  fullName: system.fabric.TransactionIsolationLevel.Snapshot
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/TransactionIsolationLevel.java
    startLine: 28
  package: system.fabric
  summary: <p>Indicates the snapshot level where volatile data can be read. Any data that is read will be a transaction-consistent version of the data that existed at start of the transaction. </p>
  syntax:
    content: public Snapshot=(4)
references:
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: system.fabric._transaction
  parent: system.fabric
  href: system.fabric._transaction.yml
  name: Transaction
  fullName: system.fabric.Transaction
  type: Class
  syntax:
    content: public class Transaction extends TransactionBase
