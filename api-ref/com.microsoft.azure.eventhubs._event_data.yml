items:
- uid: com.microsoft.azure.eventhubs._event_data
  id: _event_data
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs._event_data.EventData(byte[])
  - com.microsoft.azure.eventhubs._event_data.EventData(byte[],final int,final int)
  - com.microsoft.azure.eventhubs._event_data.EventData(ByteBuffer)
  - com.microsoft.azure.eventhubs._event_data.getBody()
  - com.microsoft.azure.eventhubs._event_data.getBodyLength()
  - com.microsoft.azure.eventhubs._event_data.getBodyOffset()
  - com.microsoft.azure.eventhubs._event_data.getProperties()
  - com.microsoft.azure.eventhubs._event_data.getSystemProperties()
  - com.microsoft.azure.eventhubs._event_data.setProperties(final Map<String, String>)
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Class
  source:
    remote: &o0
      path: java/azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 31
  package: com.microsoft.azure.eventhubs
  summary: <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: &o1
    content: public class EventData
  inheritance:
  - java.lang.Object
  - Serializable
  inheritedMembers:
  - com.microsoft.azure.eventhubs._event_data.EventData(Message)
  - com.microsoft.azure.eventhubs._event_data.toAmqpMessage()
  - com.microsoft.azure.eventhubs._event_data.toAmqpMessage(final String)
- uid: com.microsoft.azure.eventhubs._event_data.EventData(byte[])
  id: EventData(byte[])
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: EventData(byte[] data)
  fullName: com.microsoft.azure.eventhubs.EventData.EventData(byte[] data)
  type: Constructor
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 105
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Construct <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to Send to EventHubs. Typical pattern to create a Sending <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> is: <preformatted>

    i.  Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii. If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> for the Consumer.

    </preformatted></p>

    <p>Sample Code: <preformatted><xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> eventData = new EventData(telemetryEventBytes);

    eventData.getProperties().put("eventType", "com.microsoft.azure.monitoring.EtlEvent");

    partitionSender.Send(eventData);

    </preformatted></p>
  syntax:
    content: public EventData(byte[] data)
    parameters:
    - id: data
      type: bc819c2f
      description: <p>the actual payload of data in bytes to be Sent to EventHubs. </p>
- uid: com.microsoft.azure.eventhubs._event_data.EventData(byte[],final int,final int)
  id: EventData(byte[],final int,final int)
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: EventData(byte[] data, final int offset, final int length)
  fullName: com.microsoft.azure.eventhubs.EventData.EventData(byte[] data, final int offset, final int length)
  type: Constructor
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 135
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Construct <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to Send to EventHubs. Typical pattern to create a Sending <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> is: <preformatted>

    i.  Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii. If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> for the Consumer.

     </preformatted></p>

    <p>Illustration: <preformatted><programlisting><codeline><highlight class="normal">EventData<sp></sp>eventData<sp></sp>=<sp></sp>new<sp></sp>EventData(telemetryEventBytes,<sp></sp>offset,<sp></sp>length);</highlight></codeline><codeline><highlight class="normal">eventData.getProperties().put("eventType",<sp></sp>"com.microsoft.azure.monitoring.EtlEvent");</highlight></codeline><codeline><highlight class="normal">partitionSender.Send(eventData);</highlight></codeline></programlisting></preformatted></p>
  syntax:
    content: public EventData(byte[] data, final int offset, final int length)
    parameters:
    - id: data
      type: bc819c2f
      description: <p>the byte[] where the payload of the Event to be sent to EventHubs is present </p>
    - id: offset
      type: cd225469
      description: <p>Offset in the byte[] to read from ; inclusive index </p>
    - id: length
      type: cd225469
      description: <p>length of the byte[] to be read, starting from offset </p>
- uid: com.microsoft.azure.eventhubs._event_data.EventData(ByteBuffer)
  id: EventData(ByteBuffer)
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: EventData(ByteBuffer buffer)
  fullName: com.microsoft.azure.eventhubs.EventData.EventData(ByteBuffer buffer)
  type: Constructor
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 163
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Construct <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to Send to EventHubs. Typical pattern to create a Sending <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> is: <preformatted>

    i.  Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii. If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> for the Consumer.

     </preformatted></p>

    <p>Illustration: <preformatted><programlisting><codeline><highlight class="normal">EventData<sp></sp>eventData<sp></sp>=<sp></sp>new<sp></sp>EventData(telemetryEventByteBuffer);</highlight></codeline><codeline><highlight class="normal">eventData.getProperties().put("eventType",<sp></sp>"com.microsoft.azure.monitoring.EtlEvent");</highlight></codeline><codeline><highlight class="normal">partitionSender.Send(eventData);</highlight></codeline></programlisting></preformatted></p>
  syntax:
    content: public EventData(ByteBuffer buffer)
    parameters:
    - id: buffer
      type: 85310d28
      description: <p>ByteBuffer which references the payload of the Event to be sent to EventHubs </p>
- uid: com.microsoft.azure.eventhubs._event_data.getBody()
  id: getBody()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getBody()
  fullName: byte [] com.microsoft.azure.eventhubs.EventData.getBody()
  type: Method
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 180
  package: com.microsoft.azure.eventhubs
  summary: <p>Get Actual Payload/Data wrapped by <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. This is the underlying array and should be used in conjunction with <xref href="com.microsoft.azure.eventhubs._event_data.getBodyOffset()" data-throw-if-not-resolved="false"></xref> and <xref href="com.microsoft.azure.eventhubs._event_data.getBodyLength()" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: &o5
    content: public byte[] getBody()
    return:
      type: bc819c2f
      description: <p>returns the byte[] of the actual data </p>
- uid: com.microsoft.azure.eventhubs._event_data.getBodyLength()
  id: getBodyLength()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getBodyLength()
  fullName: int com.microsoft.azure.eventhubs.EventData.getBodyLength()
  type: Method
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 202
  package: com.microsoft.azure.eventhubs
  summary: <p>Get the length of the Actual Payload/Data in the byte array returned by <xref href="com.microsoft.azure.eventhubs._event_data.getBody()" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: &o4
    content: public int getBodyLength()
    return:
      type: f75371fa
      description: <p>returns the byte[] of the actual data </p>
  see:
  - type: com.microsoft.azure.eventhubs._event_data.getBody()
    description: 
  - type: com.microsoft.azure.eventhubs._event_data.getBodyOffset()
    description: 
- uid: com.microsoft.azure.eventhubs._event_data.getBodyOffset()
  id: getBodyOffset()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getBodyOffset()
  fullName: int com.microsoft.azure.eventhubs.EventData.getBodyOffset()
  type: Method
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 191
  package: com.microsoft.azure.eventhubs
  summary: <p>Get the offset of the current Payload/Data in the byte array returned by <xref href="com.microsoft.azure.eventhubs._event_data.getBody()" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: &o3
    content: public int getBodyOffset()
    return:
      type: f75371fa
      description: <p>returns the byte[] of the actual data </p>
  see:
  - type: com.microsoft.azure.eventhubs._event_data.getBodyLength()
    description: 
  - type: com.microsoft.azure.eventhubs._event_data.getBody()
    description: 
- uid: com.microsoft.azure.eventhubs._event_data.getProperties()
  id: getProperties()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getProperties()
  fullName: Map<String, String> com.microsoft.azure.eventhubs.EventData.getProperties()
  type: Method
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 211
  package: com.microsoft.azure.eventhubs
  summary: <p>Application property bag </p>
  syntax: &o2
    content: public Map<String, String> getProperties()
    return:
      type: 689c8cb5
      description: <p>returns Application properties </p>
- uid: com.microsoft.azure.eventhubs._event_data.getSystemProperties()
  id: getSystemProperties()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getSystemProperties()
  fullName: SystemProperties com.microsoft.azure.eventhubs.EventData.getSystemProperties()
  type: Method
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 246
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>SystemProperties that are populated by EventHubService. </p>

    <p>As these are populated by Service, they are only present on a Received <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>

    <p>Usage:</p>

    <p></p>
  syntax:
    content: public SystemProperties getSystemProperties()
    return:
      type: a4d677af
      description: <p>an encapsulation of all SystemProperties appended by EventHubs service into <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. <code>null</code> if the <ref refid="" kindref="compound">EventData()</ref> is not received and is created by the public constructors. </p>
- uid: com.microsoft.azure.eventhubs._event_data.setProperties(final Map<String, String>)
  id: setProperties(final Map<String, String>)
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: setProperties(final Map<String, String> applicationProperties)
  fullName: void com.microsoft.azure.eventhubs.EventData.setProperties(final Map<String, String> applicationProperties)
  type: Method
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 227
  package: com.microsoft.azure.eventhubs
  summary: <p>Set Application Properties <xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><p>use <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> and add properties to the bag. </p></xrefdescription></xrefsect></p>
  syntax:
    content: public void setProperties(final Map<String, String> applicationProperties)
    parameters:
    - id: applicationProperties
      type: 15b3ef59
      description: <p>the Application Properties bag </p>
references:
- uid: bc819c2f
  spec.java:
  - name: byte[]
    fullName: byte[]
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: 85310d28
  spec.java:
  - name: ByteBuffer
    fullName: ByteBuffer
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: 689c8cb5
  spec.java:
  - name: Map<String, String>
    fullName: Map<String, String>
- uid: 15b3ef59
  spec.java:
  - name: final Map<String, String>
    fullName: final Map<String, String>
- uid: a4d677af
  spec.java:
  - name: SystemProperties
    fullName: SystemProperties
- uid: com.microsoft.azure.eventhubs._event_data.EventData(Message)
- uid: com.microsoft.azure.eventhubs._event_data.toAmqpMessage()
- uid: com.microsoft.azure.eventhubs._event_data.toAmqpMessage(final String)
- uid: com.microsoft.azure.eventhubs._partition_receiver
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  name: PartitionReceiver
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver
  type: Class
  summary: >-
    <p>This is a logical representation of receiving from a EventHub partition. </p>

    <p>A <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref> is tied to a ConsumerGroup + EventHub Partition combination. <itemizedlist><listitem><p>If an epoch based <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref> (i.e., <xref href="com.microsoft.azure.eventhubs._partition_receiver.getEpoch()" data-throw-if-not-resolved="false"></xref> != 0) is created, EventHubs service will guarantee only 1 active receiver exists per ConsumerGroup + Partition combo. This is the recommended approach to create a <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref>. </p></listitem><listitem><p>Multiple receivers per ConsumerGroup + Partition combo can be created using non-epoch receivers. </p></listitem></itemizedlist></p>
  syntax:
    content: public class PartitionReceiver
- uid: com.microsoft.azure.eventhubs._event_data
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Class
  summary: <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: *o1
- uid: com.microsoft.azure.eventhubs._event_data.getProperties()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getProperties()
  fullName: Map<String, String> com.microsoft.azure.eventhubs.EventData.getProperties()
  type: Method
  summary: <p>Application property bag </p>
  syntax: *o2
- uid: com.microsoft.azure.eventhubs._event_data.getBodyOffset()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getBodyOffset()
  fullName: int com.microsoft.azure.eventhubs.EventData.getBodyOffset()
  type: Method
  summary: <p>Get the offset of the current Payload/Data in the byte array returned by <xref href="com.microsoft.azure.eventhubs._event_data.getBody()" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: *o3
- uid: com.microsoft.azure.eventhubs._event_data.getBodyLength()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getBodyLength()
  fullName: int com.microsoft.azure.eventhubs.EventData.getBodyLength()
  type: Method
  summary: <p>Get the length of the Actual Payload/Data in the byte array returned by <xref href="com.microsoft.azure.eventhubs._event_data.getBody()" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: *o4
- uid: com.microsoft.azure.eventhubs._event_data.getBody()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getBody()
  fullName: byte [] com.microsoft.azure.eventhubs.EventData.getBody()
  type: Method
  summary: <p>Get Actual Payload/Data wrapped by <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. This is the underlying array and should be used in conjunction with <xref href="com.microsoft.azure.eventhubs._event_data.getBodyOffset()" data-throw-if-not-resolved="false"></xref> and <xref href="com.microsoft.azure.eventhubs._event_data.getBodyLength()" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: *o5
