items:
- uid: com.microsoft.applicationinsights.log4j.v2._application_insights_appender
  id: _application_insights_appender
  parent: com.microsoft.applicationinsights.log4j.v2
  children:
  - com.microsoft.applicationinsights.log4j.v2._application_insights_appender.append(LogEvent)
  - com.microsoft.applicationinsights.log4j.v2._application_insights_appender.ApplicationInsightsAppender(String,String)
  - com.microsoft.applicationinsights.log4j.v2._application_insights_appender.createAppender(@PluginAttribute("name") String,@PluginAttribute("instrumentationKey") String)
  - com.microsoft.applicationinsights.log4j.v2._application_insights_appender.getTelemetryClientProxy()
  - com.microsoft.applicationinsights.log4j.v2._application_insights_appender.start()
  href: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.yml
  langs:
  - java
  name: ApplicationInsightsAppender
  fullName: com.microsoft.applicationinsights.log4j.v2.ApplicationInsightsAppender
  type: Class
  source:
    remote: &o0
      path: logging/log4j2/appenderSrc/main/java/com/microsoft/applicationinsights/log4j/v2/ApplicationInsightsAppender.java
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-Java
    path: logging/log4j2/appenderSrc/main/java/com/microsoft/applicationinsights/log4j/v2/ApplicationInsightsAppender.java
    startLine: 34
  package: com.microsoft.applicationinsights.log4j.v2
  syntax: &o1
    content: public class ApplicationInsightsAppender
  inheritance:
  - java.lang.Object
  - AbstractAppender
- uid: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.append(LogEvent)
  id: append(LogEvent)
  parent: com.microsoft.applicationinsights.log4j.v2._application_insights_appender
  href: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.yml
  langs:
  - java
  name: append(LogEvent event)
  fullName: void com.microsoft.applicationinsights.log4j.v2.ApplicationInsightsAppender.append(LogEvent event)
  type: Method
  source:
    remote: *o0
    path: logging/log4j2/appenderSrc/main/java/com/microsoft/applicationinsights/log4j/v2/ApplicationInsightsAppender.java
    startLine: 95
  package: com.microsoft.applicationinsights.log4j.v2
  summary: >-
    <p>Logs a LogEvent using whatever logic this Appender wishes to use. It is typically recommended to use a bridge pattern not only for the benefits from decoupling an Appender from its implementation, but it is also handy for sharing resources which may require some form of locking.</p>

    <p></p>
  syntax:
    content: public void append(LogEvent event)
    parameters:
    - id: event
      type: 93a18e44
      description: <p>The LogEvent. </p>
- uid: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.ApplicationInsightsAppender(String,String)
  id: ApplicationInsightsAppender(String,String)
  parent: com.microsoft.applicationinsights.log4j.v2._application_insights_appender
  href: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.yml
  langs:
  - java
  name: ApplicationInsightsAppender(String name, String instrumentationKey)
  fullName: com.microsoft.applicationinsights.log4j.v2.ApplicationInsightsAppender.ApplicationInsightsAppender(String name, String instrumentationKey)
  type: Constructor
  source:
    remote: *o0
    path: logging/log4j2/appenderSrc/main/java/com/microsoft/applicationinsights/log4j/v2/ApplicationInsightsAppender.java
    startLine: 51
  package: com.microsoft.applicationinsights.log4j.v2
  summary: <p>Constructs new Application Insights appender. </p>
  syntax:
    content: protected ApplicationInsightsAppender(String name, String instrumentationKey)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The appender name. </p>
    - id: instrumentationKey
      type: "26831127"
      description: <p>The instrumentation key. </p>
- uid: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.createAppender(@PluginAttribute("name") String,@PluginAttribute("instrumentationKey") String)
  id: createAppender(@PluginAttribute("name") String,@PluginAttribute("instrumentationKey") String)
  parent: com.microsoft.applicationinsights.log4j.v2._application_insights_appender
  href: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.yml
  langs:
  - java
  name: createAppender(@PluginAttribute("name") String name,@PluginAttribute("instrumentationKey") String instrumentationKey)
  fullName: static ApplicationInsightsAppender com.microsoft.applicationinsights.log4j.v2.ApplicationInsightsAppender.createAppender(@PluginAttribute("name") String name,@PluginAttribute("instrumentationKey") String instrumentationKey)
  type: Method
  source:
    remote: *o0
    path: logging/log4j2/appenderSrc/main/java/com/microsoft/applicationinsights/log4j/v2/ApplicationInsightsAppender.java
    startLine: 80
  package: com.microsoft.applicationinsights.log4j.v2
  summary: <p>Creates new appender with the given name and instrumentation key. This method is being called on the application startup upon Log4j system initialization. </p>
  syntax:
    content: public static ApplicationInsightsAppender createAppender(@PluginAttribute("name") String name,@PluginAttribute("instrumentationKey") String instrumentationKey)
    parameters:
    - id: name
      type: 1151c0eb
      description: <p>The appender name. </p>
    - id: instrumentationKey
      type: a9b50d45
      description: <p>The instrumentation key. </p>
    return:
      type: com.microsoft.applicationinsights.log4j.v2._application_insights_appender
      description: <p>New Application Insights appender. </p>
- uid: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.getTelemetryClientProxy()
  id: getTelemetryClientProxy()
  parent: com.microsoft.applicationinsights.log4j.v2._application_insights_appender
  href: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.yml
  langs:
  - java
  name: getTelemetryClientProxy()
  fullName: LogTelemetryClientProxy com.microsoft.applicationinsights.log4j.v2.ApplicationInsightsAppender.getTelemetryClientProxy()
  type: Method
  source:
    remote: *o0
    path: logging/log4j2/appenderSrc/main/java/com/microsoft/applicationinsights/log4j/v2/ApplicationInsightsAppender.java
    startLine: 68
  package: com.microsoft.applicationinsights.log4j.v2
  syntax:
    content: public LogTelemetryClientProxy getTelemetryClientProxy()
    return:
      type: com.microsoft.applicationinsights.internal.common._log_telemetry_client_proxy
- uid: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.start()
  id: start()
  parent: com.microsoft.applicationinsights.log4j.v2._application_insights_appender
  href: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.yml
  langs:
  - java
  name: start()
  fullName: void com.microsoft.applicationinsights.log4j.v2.ApplicationInsightsAppender.start()
  type: Method
  source:
    remote: *o0
    path: logging/log4j2/appenderSrc/main/java/com/microsoft/applicationinsights/log4j/v2/ApplicationInsightsAppender.java
    startLine: 115
  package: com.microsoft.applicationinsights.log4j.v2
  summary: <p>This method is being called on object initialization. </p>
  syntax:
    content: public void start()
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 93a18e44
  spec.java:
  - name: LogEvent
    fullName: LogEvent
- uid: 1151c0eb
  spec.java:
  - name: '@PluginAttribute("name") String'
    fullName: '@PluginAttribute("name") String'
- uid: a9b50d45
  spec.java:
  - name: '@PluginAttribute("instrumentationKey") String'
    fullName: '@PluginAttribute("instrumentationKey") String'
- uid: com.microsoft.applicationinsights.internal.common._telemetry_client_proxy
  parent: com.microsoft.applicationinsights.internal.common
  href: com.microsoft.applicationinsights.internal.common._telemetry_client_proxy.yml
  name: TelemetryClientProxy
  fullName: com.microsoft.applicationinsights.internal.common.TelemetryClientProxy
  type: Interface
  syntax:
    content: public interface TelemetryClientProxy
- uid: com.microsoft.applicationinsights.internal.common._log_telemetry_client_proxy
  parent: com.microsoft.applicationinsights.internal.common
  href: com.microsoft.applicationinsights.internal.common._log_telemetry_client_proxy.yml
  name: LogTelemetryClientProxy
  fullName: com.microsoft.applicationinsights.internal.common.LogTelemetryClientProxy
  type: Class
  summary: <p>This class encapsulates all the common logic for sending AI telemetry. This class is used by all Appenders, Listeners etc and therefore keeping them without any logic. </p>
  syntax:
    content: public class LogTelemetryClientProxy
- uid: com.microsoft.applicationinsights.log4j.v2._application_insights_appender
  parent: com.microsoft.applicationinsights.log4j.v2
  href: com.microsoft.applicationinsights.log4j.v2._application_insights_appender.yml
  name: ApplicationInsightsAppender
  fullName: com.microsoft.applicationinsights.log4j.v2.ApplicationInsightsAppender
  type: Class
  syntax: *o1
