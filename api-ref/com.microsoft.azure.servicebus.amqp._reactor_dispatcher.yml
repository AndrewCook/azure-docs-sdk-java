items:
- uid: com.microsoft.azure.servicebus.amqp._reactor_dispatcher
  id: _reactor_dispatcher
  parent: com.microsoft.azure.servicebus.amqp
  children:
  - com.microsoft.azure.servicebus.amqp._reactor_dispatcher.invoke(final DispatchHandler)
  - com.microsoft.azure.servicebus.amqp._reactor_dispatcher.invoke(final int,final DispatchHandler)
  - com.microsoft.azure.servicebus.amqp._reactor_dispatcher.ReactorDispatcher(final Reactor)
  href: com.microsoft.azure.servicebus.amqp._reactor_dispatcher.yml
  langs:
  - java
  name: ReactorDispatcher
  fullName: com.microsoft.azure.servicebus.amqp.ReactorDispatcher
  type: Class
  source:
    remote: &o0
      path: java/azure-eventhubs/src/main/java/com/microsoft/azure/servicebus/amqp/ReactorDispatcher.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/servicebus/amqp/ReactorDispatcher.java
    startLine: 29
  package: com.microsoft.azure.servicebus.amqp
  summary: >-
    <p>

      <ref refid="" kindref="compound">Reactor</ref> is not thread-safe - all calls to <ref refid="" kindref="compound">Proton</ref> API's should be - on the Reactor Thread. <ref refid="" kindref="compound">Reactor</ref> works out-of-box for all event driven API - ex: onReceive - which could raise upon onSocketRead. <ref refid="" kindref="compound">Reactor</ref> didn't support API's like Send() out-of-box - which could potentially run on different thread to that of Reactor. So, the following utility class is used to generate an Event to hook into <ref refid="" kindref="compound">Reactor</ref>'s event delegation pattern. It uses a <ref refid="" kindref="compound">Pipe</ref> as the IO on which Reactor Listens to. Cardinality: multiple <xref href="com.microsoft.azure.servicebus.amqp._reactor_dispatcher" data-throw-if-not-resolved="false"></xref>'s could be attached to 1 <ref refid="" kindref="compound">Reactor</ref>. Each <xref href="com.microsoft.azure.servicebus.amqp._reactor_dispatcher" data-throw-if-not-resolved="false"></xref> should be initialized Synchronously - as it calls API in <ref refid="" kindref="compound">Reactor</ref> which is not thread-safe. </p>
  syntax: &o1
    content: public class ReactorDispatcher
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.servicebus.amqp._reactor_dispatcher.invoke(final DispatchHandler)
  id: invoke(final DispatchHandler)
  parent: com.microsoft.azure.servicebus.amqp._reactor_dispatcher
  href: com.microsoft.azure.servicebus.amqp._reactor_dispatcher.yml
  langs:
  - java
  name: invoke(final DispatchHandler timerCallback)
  fullName: void com.microsoft.azure.servicebus.amqp.ReactorDispatcher.invoke(final DispatchHandler timerCallback)
  type: Method
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/servicebus/amqp/ReactorDispatcher.java
    startLine: 58
  package: com.microsoft.azure.servicebus.amqp
  syntax:
    content: public void invoke(final DispatchHandler timerCallback)
    parameters:
    - id: timerCallback
      type: 93de0ef9com.microsoft.azure.servicebus.amqp._dispatch_handler
- uid: com.microsoft.azure.servicebus.amqp._reactor_dispatcher.invoke(final int,final DispatchHandler)
  id: invoke(final int,final DispatchHandler)
  parent: com.microsoft.azure.servicebus.amqp._reactor_dispatcher
  href: com.microsoft.azure.servicebus.amqp._reactor_dispatcher.yml
  langs:
  - java
  name: invoke(final int delay, final DispatchHandler timerCallback)
  fullName: void com.microsoft.azure.servicebus.amqp.ReactorDispatcher.invoke(final int delay, final DispatchHandler timerCallback)
  type: Method
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/servicebus/amqp/ReactorDispatcher.java
    startLine: 64
  package: com.microsoft.azure.servicebus.amqp
  syntax:
    content: public void invoke(final int delay, final DispatchHandler timerCallback)
    parameters:
    - id: delay
      type: cd225469
    - id: timerCallback
      type: 93de0ef9com.microsoft.azure.servicebus.amqp._dispatch_handler
- uid: com.microsoft.azure.servicebus.amqp._reactor_dispatcher.ReactorDispatcher(final Reactor)
  id: ReactorDispatcher(final Reactor)
  parent: com.microsoft.azure.servicebus.amqp._reactor_dispatcher
  href: com.microsoft.azure.servicebus.amqp._reactor_dispatcher.yml
  langs:
  - java
  name: ReactorDispatcher(final Reactor reactor)
  fullName: com.microsoft.azure.servicebus.amqp.ReactorDispatcher.ReactorDispatcher(final Reactor reactor)
  type: Constructor
  source:
    remote: *o0
    path: java/azure-eventhubs/src/main/java/com/microsoft/azure/servicebus/amqp/ReactorDispatcher.java
    startLine: 36
  package: com.microsoft.azure.servicebus.amqp
  syntax:
    content: public ReactorDispatcher(final Reactor reactor)
    parameters:
    - id: reactor
      type: 723aaf67
references:
- uid: 723aaf67
  spec.java:
  - name: final Reactor
    fullName: final Reactor
- uid: 93de0ef9com.microsoft.azure.servicebus.amqp._dispatch_handler
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.servicebus.amqp._dispatch_handler
    name: DispatchHandler
    fullName: com.microsoft.azure.servicebus.amqp.DispatchHandler
    href: com.microsoft.azure.servicebus.amqp._dispatch_handler.yml
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: com.microsoft.azure.servicebus.amqp._dispatch_handler
  parent: com.microsoft.azure.servicebus.amqp
  href: com.microsoft.azure.servicebus.amqp._dispatch_handler.yml
  name: DispatchHandler
  fullName: com.microsoft.azure.servicebus.amqp.DispatchHandler
  type: Class
  syntax:
    content: public class DispatchHandler
- uid: com.microsoft.azure.servicebus.amqp._reactor_dispatcher
  parent: com.microsoft.azure.servicebus.amqp
  href: com.microsoft.azure.servicebus.amqp._reactor_dispatcher.yml
  name: ReactorDispatcher
  fullName: com.microsoft.azure.servicebus.amqp.ReactorDispatcher
  type: Class
  summary: >-
    <p>

      <ref refid="" kindref="compound">Reactor</ref> is not thread-safe - all calls to <ref refid="" kindref="compound">Proton</ref> API's should be - on the Reactor Thread. <ref refid="" kindref="compound">Reactor</ref> works out-of-box for all event driven API - ex: onReceive - which could raise upon onSocketRead. <ref refid="" kindref="compound">Reactor</ref> didn't support API's like Send() out-of-box - which could potentially run on different thread to that of Reactor. So, the following utility class is used to generate an Event to hook into <ref refid="" kindref="compound">Reactor</ref>'s event delegation pattern. It uses a <ref refid="" kindref="compound">Pipe</ref> as the IO on which Reactor Listens to. Cardinality: multiple <xref href="com.microsoft.azure.servicebus.amqp._reactor_dispatcher" data-throw-if-not-resolved="false"></xref>'s could be attached to 1 <ref refid="" kindref="compound">Reactor</ref>. Each <xref href="com.microsoft.azure.servicebus.amqp._reactor_dispatcher" data-throw-if-not-resolved="false"></xref> should be initialized Synchronously - as it calls API in <ref refid="" kindref="compound">Reactor</ref> which is not thread-safe. </p>
  syntax: *o1
