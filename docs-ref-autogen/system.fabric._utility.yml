items:
- uid: system.fabric._utility
  id: _utility
  parent: system.fabric
  children:
  - system.fabric._utility.getFabricException(Throwable)
  - system.fabric._utility.getInnerException(Throwable)
  - system.fabric._utility.getRuntimeException(Throwable)
  - system.fabric._utility.TryTranslateJavaExceptionToCOM(Exception)
  - system.fabric._utility.TryTranslateJavaExceptionToCOMAndThrow(Exception)
  - system.fabric._utility.WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>>,long,String)
  href: system.fabric._utility.yml
  langs:
  - java
  name: Utility
  fullName: system.fabric.Utility
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 13
  package: system.fabric
  syntax:
    content: public class Utility
  inheritance:
  - java.lang.Object
- uid: system.fabric._utility.getFabricException(Throwable)
  id: getFabricException(Throwable)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: getFabricException(Throwable t)
  fullName: static FabricException system.fabric.Utility.getFabricException(Throwable t)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 84
  package: system.fabric
  summary: >-
    <p>This method should be used when one future is being completed exceptionally with the exception caused by another future or if the exception is being rethrown from handle clause of the future. Ex1: f1.handle((r, e) -&gt; e != null ? throw new FabricException(e) : r ); Ex2: f1.handle((r, e) -&gt; f2.completeExceptionally(new FabricException(e));</p>

    <p></p>
  syntax:
    content: public static FabricException getFabricException(Throwable t)
    parameters:
    - id: t
      type: a04fafd7
      description: <p>exception to be unwrapped. </p>
    return:
      type: system.fabric.exception._fabric_exception
      description: <p>FabricException after removing the ExecutionException and CompletionException layers. </p>
- uid: system.fabric._utility.getInnerException(Throwable)
  id: getInnerException(Throwable)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: getInnerException(Throwable t)
  fullName: static Throwable system.fabric.Utility.getInnerException(Throwable t)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 57
  package: system.fabric
  summary: >-
    <p>This method returns the exception by unwrapping the outer layers of ExecutionException and CompletionException(if any).</p>

    <p></p>
  syntax:
    content: public static Throwable getInnerException(Throwable t)
    parameters:
    - id: t
      type: a04fafd7
      description: <p>exception to be unwrapped. </p>
    return:
      type: a04fafd7
      description: <p>Exception after removing the ExecutionException and CompletionException layers. </p>
- uid: system.fabric._utility.getRuntimeException(Throwable)
  id: getRuntimeException(Throwable)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: getRuntimeException(Throwable t)
  fullName: static RuntimeException system.fabric.Utility.getRuntimeException(Throwable t)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 103
  package: system.fabric
  summary: >-
    <p>This method should be used when one future is being completed exceptionally with the exception caused by another future or if the exception is being rethrown from handle clause of the future. Ex1: f1.handle((r, e) -&gt; e != null ? throw new RuntimeException(e) : r ); Ex2: f1.handle((r, e) -&gt; f2.completeExceptionally(new RuntimeException(e));</p>

    <p></p>
  syntax:
    content: public static RuntimeException getRuntimeException(Throwable t)
    parameters:
    - id: t
      type: a04fafd7
      description: <p>exception to be unwrapped. </p>
    return:
      type: 9b2a4515
      description: <p>RuntimeException after removing the ExecutionException and CompletionException layers. </p>
- uid: system.fabric._utility.TryTranslateJavaExceptionToCOM(Exception)
  id: TryTranslateJavaExceptionToCOM(Exception)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: TryTranslateJavaExceptionToCOM(Exception ex)
  fullName: static ComException system.fabric.Utility.TryTranslateJavaExceptionToCOM(Exception ex)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 16
  package: system.fabric
  syntax:
    content: public static ComException TryTranslateJavaExceptionToCOM(Exception ex)
    parameters:
    - id: ex
      type: 8a99d4b0
    return:
      type: system.fabric.exception._com_exception
- uid: system.fabric._utility.TryTranslateJavaExceptionToCOMAndThrow(Exception)
  id: TryTranslateJavaExceptionToCOMAndThrow(Exception)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: TryTranslateJavaExceptionToCOMAndThrow(Exception ex)
  fullName: static void system.fabric.Utility.TryTranslateJavaExceptionToCOMAndThrow(Exception ex)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 26
  package: system.fabric
  syntax:
    content: public static void TryTranslateJavaExceptionToCOMAndThrow(Exception ex)
    parameters:
    - id: ex
      type: 8a99d4b0
- uid: system.fabric._utility.WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>>,long,String)
  id: WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>>,long,String)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>> func, long nativeContext, String functionTag)
  fullName: static JFabricAsyncOperationContext system.fabric.Utility.WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>> func, long nativeContext, String functionTag)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 33
  package: system.fabric
  syntax:
    content: public static JFabricAsyncOperationContext WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>> func, long nativeContext, String functionTag)
    parameters:
    - id: func
      type: 432ffe41system.fabric._cancellation_token9c57e1ef
    - id: nativeContext
      type: 0364520f
    - id: functionTag
      type: "26831127"
    return:
      type: system.fabric._j_fabric_async_operation_context
references:
- uid: 8a99d4b0
  spec.java:
  - name: Exception
    fullName: Exception
- uid: 432ffe41system.fabric._cancellation_token9c57e1ef
  spec.java:
  - name: Function<
    fullName: Function<
  - uid: system.fabric._cancellation_token
    name: CancellationToken
    fullName: system.fabric.CancellationToken
    href: system.fabric._cancellation_token.yml
  - name: ', CompletableFuture<?>>'
    fullName: ', CompletableFuture<?>>'
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: a04fafd7
  spec.java:
  - name: Throwable
    fullName: Throwable
- uid: 9b2a4515
  spec.java:
  - name: RuntimeException
    fullName: RuntimeException
- uid: system.fabric.exception._com_exception
  parent: system.fabric.exception
  href: system.fabric.exception._com_exception.yml
  name: ComException
  fullName: system.fabric.exception.ComException
  type: Class
  summary: <p>The exception that is thrown when an unrecognized HRESULT is returned from a COM method call. </p>
  syntax:
    content: public class ComException
- uid: system.fabric._j_fabric_async_operation_context
  parent: system.fabric
  href: system.fabric._j_fabric_async_operation_context.yml
  name: JFabricAsyncOperationContext
  fullName: system.fabric.JFabricAsyncOperationContext
  type: Class
  syntax:
    content: public class JFabricAsyncOperationContext
- uid: system.fabric._cancellation_token
  parent: system.fabric
  href: system.fabric._cancellation_token.yml
  name: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: <p>A <xref href="system.fabric._cancellation_token" data-throw-if-not-resolved="false"></xref> is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref href="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false"></xref> object, which manages cancellation tokens retrieved from its <xref href="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false"></xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref href="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false"></xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>
  syntax:
    content: public class CancellationToken
- uid: system.fabric.exception._fabric_exception
  parent: system.fabric.exception
  href: system.fabric.exception._fabric_exception.yml
  name: FabricException
  fullName: system.fabric.exception.FabricException
  type: Class
  syntax:
    content: public class FabricException
