items:
- uid: microsoft.servicefabric.actors._actor_proxy_base
  id: _actor_proxy_base
  parent: microsoft.servicefabric.actors
  children:
  - microsoft.servicefabric.actors._actor_proxy_base.ActorProxyBase()
  - microsoft.servicefabric.actors._actor_proxy_base.continueWith(CompletableFuture<Object>)
  - microsoft.servicefabric.actors._actor_proxy_base.continueWithResult(int,int,CompletableFuture<Object>)
  - microsoft.servicefabric.actors._actor_proxy_base.create(ActorId,Class<?>)
  - microsoft.servicefabric.actors._actor_proxy_base.create(ActorId,Class<?>,String)
  - microsoft.servicefabric.actors._actor_proxy_base.create(ActorId,Class<?>,String,String)
  - microsoft.servicefabric.actors._actor_proxy_base.create(ActorId,URI,Class<?>)
  - microsoft.servicefabric.actors._actor_proxy_base.getActorId()
  - microsoft.servicefabric.actors._actor_proxy_base.getActorServicePartitionClient()
  - microsoft.servicefabric.actors._actor_proxy_base.invokeAsync(int,int,Object)
  href: microsoft.servicefabric.actors._actor_proxy_base.yml
  langs:
  - java
  name: ActorProxyBase
  fullName: microsoft.servicefabric.actors.ActorProxyBase
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
    startLine: 15
  package: microsoft.servicefabric.actors
  summary: <p>Provides the base implementation for the proxy to the remote actor objects implementing IActor interfaces. </p>
  syntax:
    content: public class ActorProxyBase implements ActorProxy
  inheritance:
  - java.lang.Object
  - microsoft.servicefabric.actors._actor_proxy
  inheritedMembers:
  - microsoft.servicefabric.actors._actor_proxy_base.create(Class<?>,ActorId,URI)
  - microsoft.servicefabric.actors._actor_proxy_base.getCallContext()
  - microsoft.servicefabric.actors._actor_proxy_base.initialize(ActorProxyFactory,ActorServicePartitionClient)
  - microsoft.servicefabric.actors._actor_proxy_base.subscribeAsync(Class<?>,Object,Duration)
  - microsoft.servicefabric.actors._actor_proxy_base.unsubscribeAsync(Class<?>,Object)
- uid: microsoft.servicefabric.actors._actor_proxy_base.ActorProxyBase()
  id: ActorProxyBase()
  parent: microsoft.servicefabric.actors._actor_proxy_base
  href: microsoft.servicefabric.actors._actor_proxy_base.yml
  langs:
  - java
  name: ActorProxyBase()
  fullName: microsoft.servicefabric.actors.ActorProxyBase.ActorProxyBase()
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
    startLine: 43
  package: microsoft.servicefabric.actors
  summary: <p>Initializes a new instance of the <xref href="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false"></xref> class. </p>
  syntax:
    content: protected ActorProxyBase()
- uid: microsoft.servicefabric.actors._actor_proxy_base.continueWith(CompletableFuture<Object>)
  id: continueWith(CompletableFuture<Object>)
  parent: microsoft.servicefabric.actors._actor_proxy_base
  href: microsoft.servicefabric.actors._actor_proxy_base.yml
  langs:
  - java
  name: continueWith(CompletableFuture<Object> task)
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorProxyBase.continueWith(CompletableFuture<Object> task)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
    startLine: 254
  package: microsoft.servicefabric.actors
  syntax:
    content: protected CompletableFuture<?> continueWith(CompletableFuture<Object> task)
    parameters:
    - id: task
      type: 55aa5245
    return:
      type: 16409f84
- uid: microsoft.servicefabric.actors._actor_proxy_base.continueWithResult(int,int,CompletableFuture<Object>)
  id: continueWithResult(int,int,CompletableFuture<Object>)
  parent: microsoft.servicefabric.actors._actor_proxy_base
  href: microsoft.servicefabric.actors._actor_proxy_base.yml
  langs:
  - java
  name: continueWithResult(int interfaceId, int methodId, CompletableFuture<Object> task)
  fullName: protected<TRetval> CompletableFuture<TRetval> microsoft.servicefabric.actors.ActorProxyBase.continueWithResult(int interfaceId, int methodId, CompletableFuture<Object> task)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
    startLine: 245
  package: microsoft.servicefabric.actors
  syntax:
    content: protected <TRetval> CompletableFuture<TRetval> continueWithResult(int interfaceId, int methodId, CompletableFuture<Object> task)
    parameters:
    - id: interfaceId
      type: f75371fa
    - id: methodId
      type: f75371fa
    - id: task
      type: 55aa5245
    return:
      type: 43f7e384
- uid: microsoft.servicefabric.actors._actor_proxy_base.create(ActorId,Class<?>)
  id: create(ActorId,Class<?>)
  parent: microsoft.servicefabric.actors._actor_proxy_base
  href: microsoft.servicefabric.actors._actor_proxy_base.yml
  langs:
  - java
  name: create(ActorId actorId, Class<?> actorInterfaceType)
  fullName: static <TActorInterface extends Actor> TActorInterface microsoft.servicefabric.actors.ActorProxyBase.create(ActorId actorId, Class<?> actorInterfaceType)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
    startLine: 68
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p>

    The applicationName parameter can be null if the client is running as part of the same Service Fabric application as the actor service it intends to communicate with. In this case, the application name is determined from <xref href="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false"></xref>, and is obtained by calling the <xref href="system.fabric._code_package_activation_context.getApplicationName()" data-throw-if-not-resolved="false"></xref> property. </p>

    <p></p>
  syntax:
    content: public static static<TActorInterface extends Actor> TActorInterface create(ActorId actorId, Class<?> actorInterfaceType)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: >-
        <p>

          <xref href="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false"></xref> Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: actorInterfaceType
      type: a19781f8
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    return:
      type: 1f78bb2amicrosoft.servicefabric.actors._actor972561d0
      description: <p>An actor proxy object that implements <xref href="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false"></xref> and TActorInterface. </p>
  exceptions:
  - type: "44102508"
    description: <p>Throws exception when invalid URI format is passed as applicationName </p>
- uid: microsoft.servicefabric.actors._actor_proxy_base.create(ActorId,Class<?>,String)
  id: create(ActorId,Class<?>,String)
  parent: microsoft.servicefabric.actors._actor_proxy_base
  href: microsoft.servicefabric.actors._actor_proxy_base.yml
  langs:
  - java
  name: create(ActorId actorId, Class<?> actorInterfaceType, String applicationName)
  fullName: static <TActorInterface extends Actor> TActorInterface microsoft.servicefabric.actors.ActorProxyBase.create(ActorId actorId, Class<?> actorInterfaceType, String applicationName)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
    startLine: 100
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p>

    The applicationName parameter can be null if the client is running as part of the same Service Fabric application as the actor service it intends to communicate with. In this case, the application name is determined from <xref href="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false"></xref>, and is obtained by calling the <xref href="system.fabric._code_package_activation_context.getApplicationName()" data-throw-if-not-resolved="false"></xref> property. </p>

    <p></p>
  syntax:
    content: public static static<TActorInterface extends Actor> TActorInterface create(ActorId actorId, Class<?> actorInterfaceType, String applicationName)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: >-
        <p>

          <xref href="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false"></xref> Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: actorInterfaceType
      type: a19781f8
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: applicationName
      type: "26831127"
      description: <p>Name of the Service Fabric application that contains the actor service hosting the actor objects. This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. </p>
    return:
      type: 1f78bb2amicrosoft.servicefabric.actors._actor972561d0
      description: <p>An actor proxy object that implements <xref href="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false"></xref> and TActorInterface. </p>
  exceptions:
  - type: "44102508"
    description: <p>Throws exception when invalid URI format is passed as applicationName </p>
- uid: microsoft.servicefabric.actors._actor_proxy_base.create(ActorId,Class<?>,String,String)
  id: create(ActorId,Class<?>,String,String)
  parent: microsoft.servicefabric.actors._actor_proxy_base
  href: microsoft.servicefabric.actors._actor_proxy_base.yml
  langs:
  - java
  name: create(ActorId actorId, Class<?> actorInterfaceType, String applicationName, String serviceName)
  fullName: static <TActorInterface extends Actor> TActorInterface microsoft.servicefabric.actors.ActorProxyBase.create(ActorId actorId, Class<?> actorInterfaceType, String applicationName, String serviceName)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
    startLine: 142
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p>

    The applicationName parameter can be null if the client is running as part of the same Service Fabric application as the actor service it intends to communicate with. In this case, the application name is determined from <xref href="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false"></xref>, and is obtained by calling the <xref href="system.fabric._code_package_activation_context.getApplicationName()" data-throw-if-not-resolved="false"></xref> property. </p>

    <p></p>
  syntax:
    content: public static static<TActorInterface extends Actor> TActorInterface create(ActorId actorId, Class<?> actorInterfaceType, String applicationName, String serviceName)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: >-
        <p>

          <xref href="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false"></xref> Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: actorInterfaceType
      type: a19781f8
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: applicationName
      type: "26831127"
      description: <p>Name of the Service Fabric application that contains the actor service hosting the actor objects. This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. </p>
    - id: serviceName
      type: "26831127"
      description: <p>Name of the Service Fabric service as configured by <xref href="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false"></xref> on the actor implementation. By default, the name of the service is derived from the name of the actor interface. However <xref href="microsoft.servicefabric.actors._actor_service_attribute" data-throw-if-not-resolved="false"></xref> is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the serviceName cannot be made automatically. </p>
    return:
      type: 1f78bb2amicrosoft.servicefabric.actors._actor972561d0
      description: <p>An actor proxy object that implements <xref href="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false"></xref> and TActorInterface. </p>
  exceptions:
  - type: "44102508"
    description: <p>Throws exception when invalid URI format is passed as applicationName </p>
- uid: microsoft.servicefabric.actors._actor_proxy_base.create(ActorId,URI,Class<?>)
  id: create(ActorId,URI,Class<?>)
  parent: microsoft.servicefabric.actors._actor_proxy_base
  href: microsoft.servicefabric.actors._actor_proxy_base.yml
  langs:
  - java
  name: create(ActorId actorId, URI serviceUri, Class<?> actorInterfaceType)
  fullName: static <TActorInterface extends Actor> TActorInterface microsoft.servicefabric.actors.ActorProxyBase.create(ActorId actorId, URI serviceUri, Class<?> actorInterfaceType)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
    startLine: 174
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax:
    content: public static static<TActorInterface extends Actor> TActorInterface create(ActorId actorId, URI serviceUri, Class<?> actorInterfaceType)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: >-
        <p>

          <xref href="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false"></xref> Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service </p>
    - id: actorInterfaceType
      type: a19781f8
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    return:
      type: 1f78bb2amicrosoft.servicefabric.actors._actor972561d0
      description: <p>An actor proxy object that implements <xref href="microsoft.servicefabric.actors._actor_proxy" data-throw-if-not-resolved="false"></xref> and TActorInterface. The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
- uid: microsoft.servicefabric.actors._actor_proxy_base.getActorId()
  id: getActorId()
  parent: microsoft.servicefabric.actors._actor_proxy_base
  href: microsoft.servicefabric.actors._actor_proxy_base.yml
  langs:
  - java
  name: getActorId()
  fullName: ActorId microsoft.servicefabric.actors.ActorProxyBase.getActorId()
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
    startLine: 25
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Gets <xref href="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false"></xref> associated with the proxy object.</p>

    <p></p>
  syntax:
    content: public ActorId getActorId()
    return:
      type: microsoft.servicefabric.actors._actor_id
      description: >-
        <p>

          <xref href="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false"></xref> associated with the proxy object. </p>
  overridden: microsoft.servicefabric.actors._actor_proxy.getActorId()
- uid: microsoft.servicefabric.actors._actor_proxy_base.getActorServicePartitionClient()
  id: getActorServicePartitionClient()
  parent: microsoft.servicefabric.actors._actor_proxy_base
  href: microsoft.servicefabric.actors._actor_proxy_base.yml
  langs:
  - java
  name: getActorServicePartitionClient()
  fullName: ActorServicePartitionClient microsoft.servicefabric.actors.ActorProxyBase.getActorServicePartitionClient()
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
    startLine: 36
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Gets <xref href="microsoft.servicefabric.actors._actor_service_partition_client" data-throw-if-not-resolved="false"></xref> that this proxy is using to communicate with the actor.</p>

    <p></p>
  syntax:
    content: public ActorServicePartitionClient getActorServicePartitionClient()
    return:
      type: microsoft.servicefabric.actors._actor_service_partition_client
      description: >-
        <p>

          <xref href="microsoft.servicefabric.actors._actor_service_partition_client" data-throw-if-not-resolved="false"></xref> that this proxy is using to communicate with the actor. </p>
  overridden: microsoft.servicefabric.actors._actor_proxy.getActorServicePartitionClient()
- uid: microsoft.servicefabric.actors._actor_proxy_base.invokeAsync(int,int,Object)
  id: invokeAsync(int,int,Object)
  parent: microsoft.servicefabric.actors._actor_proxy_base
  href: microsoft.servicefabric.actors._actor_proxy_base.yml
  langs:
  - java
  name: invokeAsync(int interfaceId, int methodId, Object requestBody)
  fullName: CompletableFuture<Object> microsoft.servicefabric.actors.ActorProxyBase.invokeAsync(int interfaceId, int methodId, Object requestBody)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorProxyBase.java
    startLine: 223
  package: microsoft.servicefabric.actors
  syntax:
    content: protected CompletableFuture<Object> invokeAsync(int interfaceId, int methodId, Object requestBody)
    parameters:
    - id: interfaceId
      type: f75371fa
    - id: methodId
      type: f75371fa
    - id: requestBody
      type: "79317049"
    return:
      type: 55aa5245
references:
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: 55aa5245
  spec.java:
  - name: CompletableFuture<Object>
    fullName: CompletableFuture<Object>
- uid: 16409f84
  spec.java:
  - name: CompletableFuture<?>
    fullName: CompletableFuture<?>
- uid: 43f7e384
  spec.java:
  - name: <TRetval> CompletableFuture<TRetval>
    fullName: <TRetval> CompletableFuture<TRetval>
- uid: "44102508"
  spec.java:
  - name: URISyntaxException
    fullName: URISyntaxException
- uid: a19781f8
  spec.java:
  - name: Class<?>
    fullName: Class<?>
- uid: 1f78bb2amicrosoft.servicefabric.actors._actor972561d0
  spec.java:
  - name: 'static<TActorInterface extends '
    fullName: 'static<TActorInterface extends '
  - uid: microsoft.servicefabric.actors._actor
    name: Actor
    fullName: microsoft.servicefabric.actors.Actor
    href: microsoft.servicefabric.actors._actor.yml
  - name: '> TActorInterface'
    fullName: '> TActorInterface'
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: microsoft.servicefabric.actors._actor_proxy_base.create(Class<?>,ActorId,URI)
- uid: microsoft.servicefabric.actors._actor_proxy_base.getCallContext()
- uid: microsoft.servicefabric.actors._actor_proxy_base.initialize(ActorProxyFactory,ActorServicePartitionClient)
- uid: microsoft.servicefabric.actors._actor_proxy_base.subscribeAsync(Class<?>,Object,Duration)
- uid: microsoft.servicefabric.actors._actor_proxy_base.unsubscribeAsync(Class<?>,Object)
- uid: microsoft.servicefabric.actors._actor_proxy
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_proxy.yml
  name: ActorProxy
  fullName: microsoft.servicefabric.actors.ActorProxy
  type: Interface
  summary: <p>Provides the interface for implementation of proxy access for actor service. </p>
  syntax:
    content: public interface ActorProxy
- uid: microsoft.servicefabric.actors._actor_service_partition_client
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_service_partition_client.yml
  name: ActorServicePartitionClient
  fullName: microsoft.servicefabric.actors.ActorServicePartitionClient
  type: Class
  summary: <p>Specifies the Service partition client for <xref href="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false"></xref> communication </p>
  syntax:
    content: public class ActorServicePartitionClient
- uid: microsoft.servicefabric.actors._actor_id
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_id.yml
  name: ActorId
  fullName: microsoft.servicefabric.actors.ActorId
  type: Class
  summary: >-
    <p>

      <xref href="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false"></xref> represents identity of an actor within an actor service. The actors can be identified by <ref refid="" kindref="compound">java.lang.String</ref>, <ref refid="" kindref="compound">java.util.UUID</ref> or long. </p>
  syntax:
    content: public class ActorId
- uid: microsoft.servicefabric.actors._actor_proxy.getActorId()
  parent: microsoft.servicefabric.actors._actor_proxy
  href: microsoft.servicefabric.actors._actor_proxy.yml
  name: getActorId()
  fullName: ActorId microsoft.servicefabric.actors.ActorProxy.getActorId()
  type: Method
  summary: >-
    <p>Gets <xref href="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false"></xref> associated with the proxy object.</p>

    <p></p>
  syntax:
    content: public ActorId getActorId()
    return:
      type: microsoft.servicefabric.actors._actor_id
      description: >-
        <p>

          <xref href="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false"></xref> associated with the proxy object. </p>
- uid: microsoft.servicefabric.actors._actor_proxy.getActorServicePartitionClient()
  parent: microsoft.servicefabric.actors._actor_proxy
  href: microsoft.servicefabric.actors._actor_proxy.yml
  name: getActorServicePartitionClient()
  fullName: ActorServicePartitionClient microsoft.servicefabric.actors.ActorProxy.getActorServicePartitionClient()
  type: Method
  summary: >-
    <p>Gets <xref href="microsoft.servicefabric.actors._actor_service_partition_client" data-throw-if-not-resolved="false"></xref> that this proxy is using to communicate with the actor.</p>

    <p></p>
  syntax:
    content: public ActorServicePartitionClient getActorServicePartitionClient()
    return:
      type: microsoft.servicefabric.actors._actor_service_partition_client
      description: >-
        <p>

          <xref href="microsoft.servicefabric.actors._actor_service_partition_client" data-throw-if-not-resolved="false"></xref> that this proxy is using to communicate with the actor. </p>
- uid: microsoft.servicefabric.actors._actor
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor.yml
  name: Actor
  fullName: microsoft.servicefabric.actors.Actor
  type: Interface
  summary: <p>Base interface for inheriting reliable actor interfaces. </p>
  syntax:
    content: public interface Actor
- uid: system.fabric._code_package_activation_context
  parent: system.fabric
  href: system.fabric._code_package_activation_context.yml
  name: CodePackageActivationContext
  fullName: system.fabric.CodePackageActivationContext
  type: Class
  summary: <p>Represents activation context for the Service Fabric service. This is valid for fabric activated service only. </p>
  syntax:
    content: public class CodePackageActivationContext
- uid: system.fabric._code_package_activation_context.getApplicationName()
  parent: system.fabric._code_package_activation_context
  href: system.fabric._code_package_activation_context.yml
  name: getApplicationName()
  fullName: String system.fabric.CodePackageActivationContext.getApplicationName()
  type: Method
  summary: >-
    <p>Gets the name of the application.</p>

    <p></p>
  syntax:
    content: public String getApplicationName()
    return:
      type: "26831127"
      description: <p>The name of the application. </p>
- uid: microsoft.servicefabric.actors._actor_service_attribute
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_service_attribute.yml
  name: ActorServiceAttribute
  fullName: microsoft.servicefabric.actors.ActorServiceAttribute
  type: Interface
  summary: <p>This attributes allows configuring the properties of the actor service. The attribute is applied on the actor type. </p>
  syntax:
    content: public interface ActorServiceAttribute
