items:
- uid: system.fabric._fabric_runtime
  id: _fabric_runtime
  parent: system.fabric
  children:
  - system.fabric._fabric_runtime.close()
  - system.fabric._fabric_runtime.create()
  - system.fabric._fabric_runtime.createAsync(Duration)
  - system.fabric._fabric_runtime.createAsync(Runnable,Duration)
  - system.fabric._fabric_runtime.getActivationContext()
  - system.fabric._fabric_runtime.getActivationContextAsync(Duration)
  - system.fabric._fabric_runtime.getNodeContext()
  - system.fabric._fabric_runtime.getNodeContextAsync(Duration)
  - system.fabric._fabric_runtime.registerServiceType(String,Class<?>)
  - system.fabric._fabric_runtime.registerServiceTypeAsync(String,Class<?>,Duration)
  - system.fabric._fabric_runtime.registerStatefulServiceFactory(String,StatefulServiceFactory)
  - system.fabric._fabric_runtime.registerStatefulServiceFactoryAsync(String,StatefulServiceFactory,Duration)
  - system.fabric._fabric_runtime.registerStatelessServiceFactory(String,StatelessServiceFactory)
  - system.fabric._fabric_runtime.registerStatelessServiceFactoryAsync(String,StatelessServiceFactory,Duration)
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: FabricRuntime
  fullName: system.fabric.FabricRuntime
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 26
  package: system.fabric
  summary: <p>Allows user created hosts to obtain their <xref href="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false"></xref>, well as to register the necessary service factories [ <xref href="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false"></xref>, <xref href="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false"></xref> ] or service types directly. </p>
  syntax: &o1
    content: public class FabricRuntime
  inheritance:
  - java.lang.Object
  - AutoCloseable
  inheritedMembers:
  - system.fabric._fabric_runtime.[static initializer]()
  - system.fabric._fabric_runtime.BeginGetNodeContext(long,NativeAsyncCallback)
  - system.fabric._fabric_runtime.BeginRegisterStatefulServiceFactory(long,String,JServiceFactoryBroker,long,NativeAsyncCallback)
  - system.fabric._fabric_runtime.BeginRegisterStatelessServiceFactory(long,String,JServiceFactoryBroker,long,NativeAsyncCallback)
  - system.fabric._fabric_runtime.CreateFabricRuntime()
  - system.fabric._fabric_runtime.EndGetNodeContext(long)
  - system.fabric._fabric_runtime.EndRegisterStatefulServiceFactory(long,long)
  - system.fabric._fabric_runtime.EndRegisterStatelessServiceFactory(long,long)
  - system.fabric._fabric_runtime.FabricBeginCreateRuntime(FabricRuntime,long,NativeAsyncCallback)
  - system.fabric._fabric_runtime.FabricBeginGetActivationContext(long,NativeAsyncCallback)
  - system.fabric._fabric_runtime.FabricEndCreateRuntime(long)
  - system.fabric._fabric_runtime.FabricEndGetActivationContext(long)
  - system.fabric._fabric_runtime.FabricGetActivationContext()
  - system.fabric._fabric_runtime.FabricRuntime()
  - system.fabric._fabric_runtime.FabricRuntime(CodePackageActivationContext)
  - system.fabric._fabric_runtime.FabricRuntime(CodePackageActivationContext,Runnable)
  - system.fabric._fabric_runtime.GetNodeContext()
  - system.fabric._fabric_runtime.RegisterStatefulServiceFactory(long,long,String,JServiceFactoryBroker)
  - system.fabric._fabric_runtime.RegisterStatelessServiceFactory(long,long,String,JServiceFactoryBroker)
  - system.fabric._fabric_runtime.ReleaseFabricRuntime(long)
- uid: system.fabric._fabric_runtime.close()
  id: close()
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: close()
  fullName: void system.fabric.FabricRuntime.close()
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 403
  package: system.fabric
  syntax:
    content: public void close()
- uid: system.fabric._fabric_runtime.create()
  id: create()
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: create()
  fullName: static FabricRuntime system.fabric.FabricRuntime.create()
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 115
  package: system.fabric
  summary: >-
    <p>Creates the <ref refid="" kindref="compound">system.fabric.FabricRuntime</ref> object.</p>

    <p></p>
  syntax:
    content: public static FabricRuntime create()
    return:
      type: system.fabric._fabric_runtime
      description: <p>A newly created <ref refid="" kindref="compound">system.fabric.FabricRuntime</ref> object. </p>
- uid: system.fabric._fabric_runtime.createAsync(Duration)
  id: createAsync(Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: createAsync(Duration timeout)
  fullName: static CompletableFuture<FabricRuntime> system.fabric.FabricRuntime.createAsync(Duration timeout)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 129
  package: system.fabric
  summary: >-
    <p>Creates the <ref refid="" kindref="compound">system.fabric.FabricRuntime</ref> object asynchronously with the specified timeout parameter.</p>

    <p></p>
  syntax:
    content: public static CompletableFuture<FabricRuntime> createAsync(Duration timeout)
    parameters:
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    return:
      type: 9cdf14d0system.fabric._fabric_runtimea08ddfce
      description: <p>The task representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.createAsync(Runnable,Duration)
  id: createAsync(Runnable,Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: createAsync(Runnable fabricExitCallback, Duration timeout)
  fullName: static CompletableFuture<FabricRuntime> system.fabric.FabricRuntime.createAsync(Runnable fabricExitCallback, Duration timeout)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 145
  package: system.fabric
  summary: >-
    <p>Creates the <ref refid="" kindref="compound">system.fabric.FabricRuntime</ref> object asynchronously with the specified callback function which will be executed if the underlying runtime terminates or exits for any reason.</p>

    <p></p>
  syntax:
    content: public static CompletableFuture<FabricRuntime> createAsync(Runnable fabricExitCallback, Duration timeout)
    parameters:
    - id: fabricExitCallback
      type: 2b8852ea
      description: <p>The Action to be executed when the runtime exits or terminates. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    return:
      type: 9cdf14d0system.fabric._fabric_runtimea08ddfce
      description: <p>The task representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.getActivationContext()
  id: getActivationContext()
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: getActivationContext()
  fullName: static CodePackageActivationContext system.fabric.FabricRuntime.getActivationContext()
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 155
  package: system.fabric
  summary: >-
    <p>Retrieves the current <ref refid="" kindref="compound">system.fabric.FabricRuntime</ref>'s <xref href="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false"></xref>.</p>

    <p></p>
  syntax:
    content: public static CodePackageActivationContext getActivationContext()
    return:
      type: system.fabric._code_package_activation_context
      description: <p>The activation context. </p>
- uid: system.fabric._fabric_runtime.getActivationContextAsync(Duration)
  id: getActivationContextAsync(Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: getActivationContextAsync(Duration timeout)
  fullName: static CompletableFuture<CodePackageActivationContext> system.fabric.FabricRuntime.getActivationContextAsync(Duration timeout)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 169
  package: system.fabric
  summary: "<p>Retrieves the current <ref refid=\"\" kindref=\"compound\">system.fabric.FabricRuntime</ref>â€™s <xref href=\"system.fabric._code_package_activation_context\" data-throw-if-not-resolved=\"false\"></xref> asynchronously with the specified parameter.</p>\r\n<p></p>"
  syntax:
    content: public static CompletableFuture<CodePackageActivationContext> getActivationContextAsync(Duration timeout)
    parameters:
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException </p>
    return:
      type: 9cdf14d0system.fabric._code_package_activation_contexta08ddfce
      description: <p>The task representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.getNodeContext()
  id: getNodeContext()
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: getNodeContext()
  fullName: static NodeContext system.fabric.FabricRuntime.getNodeContext()
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 183
  package: system.fabric
  summary: >-
    <p>Gets the Node Context object that contains information about Fabric Node.</p>

    <p></p>
  syntax:
    content: public static NodeContext getNodeContext()
    return:
      type: system.fabric._node_context
      description: <p>The node context. </p>
- uid: system.fabric._fabric_runtime.getNodeContextAsync(Duration)
  id: getNodeContextAsync(Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: getNodeContextAsync(Duration timeout)
  fullName: static CompletableFuture<NodeContext> system.fabric.FabricRuntime.getNodeContextAsync(Duration timeout)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 195
  package: system.fabric
  summary: >-
    <p>Gets Node Context from Fabric Node asynchronously with timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public static CompletableFuture<NodeContext> getNodeContextAsync(Duration timeout)
    parameters:
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException </p>
    return:
      type: 9cdf14d0system.fabric._node_contexta08ddfce
      description: <p>The task representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.registerServiceType(String,Class<?>)
  id: registerServiceType(String,Class<?>)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerServiceType(String serviceTypeName, Class<?> serviceTypeImplementation)
  fullName: void system.fabric.FabricRuntime.registerServiceType(String serviceTypeName, Class<?> serviceTypeImplementation)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 279
  package: system.fabric
  summary: >-
    <p>Associates the specified serviceTypeName with the actual managed Type that implements it.</p>

    <p>

      <bold>Remarks:</bold>Note that this mechanism for service type registration does not require a custom <xref href="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false"></xref> or <xref href="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false"></xref> to be provided at registration time. Service Fabric will generate one at runtime and utilize it automatically. If there is a need for a custom implementation of the factory, you can implement <xref href="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false"></xref> or <xref href="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false"></xref> and then provide those via the corresponding factory registration methods ( <ref refid="" kindref="compound">system.fabric.FabricRuntime#registerStatelessServiceFactoryAsync(java.lang.String, system.fabric.StatelessServiceFactory, java.time.Duration)</ref> or <ref refid="" kindref="compound">system.fabric.FabricRuntime#registerStatefulServiceFactoryAsync(java.lang.String, system.fabric.StatefulServiceFactory, java.time.Duration)</ref> ) </p>
  syntax:
    content: public void registerServiceType(String serviceTypeName, Class<?> serviceTypeImplementation)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: serviceTypeImplementation
      type: a19781f8
      description: <p>The qualified service Type that implements the specified serviceTypeName. </p>
- uid: system.fabric._fabric_runtime.registerServiceTypeAsync(String,Class<?>,Duration)
  id: registerServiceTypeAsync(String,Class<?>,Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerServiceTypeAsync(String serviceTypeName, Class<?> serviceTypeImplementation, Duration timeout)
  fullName: CompletableFuture<?> system.fabric.FabricRuntime.registerServiceTypeAsync(String serviceTypeName, Class<?> serviceTypeImplementation, Duration timeout)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 311
  package: system.fabric
  summary: >-
    <p>Asynchronously associates the specified serviceTypeName with the actual managed Type that implements it, with the specified timeout</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> registerServiceTypeAsync(String serviceTypeName, Class<?> serviceTypeImplementation, Duration timeout)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: serviceTypeImplementation
      type: a19781f8
      description: <p>The qualified service Type that implements the specified serviceTypeName. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    return:
      type: 16409f84
      description: <p>The task representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.registerStatefulServiceFactory(String,StatefulServiceFactory)
  id: registerStatefulServiceFactory(String,StatefulServiceFactory)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerStatefulServiceFactory(String serviceTypeName, StatefulServiceFactory factory)
  fullName: void system.fabric.FabricRuntime.registerStatefulServiceFactory(String serviceTypeName, StatefulServiceFactory factory)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 241
  package: system.fabric
  summary: >-
    <p>Registers the specified <xref href="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false"></xref> for the specified service type.</p>

    <p></p>
  syntax:
    content: public void registerStatefulServiceFactory(String serviceTypeName, StatefulServiceFactory factory)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: factory
      type: system.fabric._stateful_service_factory
      description: <p>The <xref href="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false"></xref> which can create the specified service type. </p>
- uid: system.fabric._fabric_runtime.registerStatefulServiceFactoryAsync(String,StatefulServiceFactory,Duration)
  id: registerStatefulServiceFactoryAsync(String,StatefulServiceFactory,Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerStatefulServiceFactoryAsync(String serviceTypeName, StatefulServiceFactory factory, Duration timeout)
  fullName: CompletableFuture<?> system.fabric.FabricRuntime.registerStatefulServiceFactoryAsync(String serviceTypeName, StatefulServiceFactory factory, Duration timeout)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 382
  package: system.fabric
  summary: >-
    <p>Registers the specified <xref href="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false"></xref> for the specified service type with the specified timeout and cancellationToken.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> registerStatefulServiceFactoryAsync(String serviceTypeName, StatefulServiceFactory factory, Duration timeout)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: factory
      type: system.fabric._stateful_service_factory
      description: <p>The <xref href="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false"></xref> which can create the specified service type. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    return:
      type: 16409f84
      description: <p>The representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.registerStatelessServiceFactory(String,StatelessServiceFactory)
  id: registerStatelessServiceFactory(String,StatelessServiceFactory)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerStatelessServiceFactory(String serviceTypeName, StatelessServiceFactory factory)
  fullName: void system.fabric.FabricRuntime.registerStatelessServiceFactory(String serviceTypeName, StatelessServiceFactory factory)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 215
  package: system.fabric
  summary: >-
    <p>Registers the specified <xref href="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false"></xref> for the specified service type.</p>

    <p></p>
  syntax:
    content: public void registerStatelessServiceFactory(String serviceTypeName, StatelessServiceFactory factory)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: factory
      type: system.fabric._stateless_service_factory
      description: <p>The <xref href="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false"></xref> which can create the specified service type. </p>
- uid: system.fabric._fabric_runtime.registerStatelessServiceFactoryAsync(String,StatelessServiceFactory,Duration)
  id: registerStatelessServiceFactoryAsync(String,StatelessServiceFactory,Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerStatelessServiceFactoryAsync(String serviceTypeName, StatelessServiceFactory factory, Duration timeout)
  fullName: CompletableFuture<?> system.fabric.FabricRuntime.registerStatelessServiceFactoryAsync(String serviceTypeName, StatelessServiceFactory factory, Duration timeout)
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 347
  package: system.fabric
  summary: >-
    <p>Asynchronously registers the specified <xref href="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false"></xref> for the specified service type, with the specified timeout and cancellationToken</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> registerStatelessServiceFactoryAsync(String serviceTypeName, StatelessServiceFactory factory, Duration timeout)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: factory
      type: system.fabric._stateless_service_factory
      description: <p>The <xref href="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false"></xref> which can create the specified service type. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    return:
      type: 16409f84
      description: <p>The task representing the asynchronous operation. </p>
references:
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: 9cdf14d0system.fabric._fabric_runtimea08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric._fabric_runtime
    name: FabricRuntime
    fullName: system.fabric.FabricRuntime
    href: system.fabric._fabric_runtime.yml
  - name: '>'
    fullName: '>'
- uid: 2b8852ea
  spec.java:
  - name: Runnable
    fullName: Runnable
- uid: 9cdf14d0system.fabric._code_package_activation_contexta08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric._code_package_activation_context
    name: CodePackageActivationContext
    fullName: system.fabric.CodePackageActivationContext
    href: system.fabric._code_package_activation_context.yml
  - name: '>'
    fullName: '>'
- uid: 9cdf14d0system.fabric._node_contexta08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric._node_context
    name: NodeContext
    fullName: system.fabric.NodeContext
    href: system.fabric._node_context.yml
  - name: '>'
    fullName: '>'
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: a19781f8
  spec.java:
  - name: Class<?>
    fullName: Class<?>
- uid: 16409f84
  spec.java:
  - name: CompletableFuture<?>
    fullName: CompletableFuture<?>
- uid: system.fabric._fabric_runtime.[static initializer]()
- uid: system.fabric._fabric_runtime.BeginGetNodeContext(long,NativeAsyncCallback)
- uid: system.fabric._fabric_runtime.BeginRegisterStatefulServiceFactory(long,String,JServiceFactoryBroker,long,NativeAsyncCallback)
- uid: system.fabric._fabric_runtime.BeginRegisterStatelessServiceFactory(long,String,JServiceFactoryBroker,long,NativeAsyncCallback)
- uid: system.fabric._fabric_runtime.CreateFabricRuntime()
- uid: system.fabric._fabric_runtime.EndGetNodeContext(long)
- uid: system.fabric._fabric_runtime.EndRegisterStatefulServiceFactory(long,long)
- uid: system.fabric._fabric_runtime.EndRegisterStatelessServiceFactory(long,long)
- uid: system.fabric._fabric_runtime.FabricBeginCreateRuntime(FabricRuntime,long,NativeAsyncCallback)
- uid: system.fabric._fabric_runtime.FabricBeginGetActivationContext(long,NativeAsyncCallback)
- uid: system.fabric._fabric_runtime.FabricEndCreateRuntime(long)
- uid: system.fabric._fabric_runtime.FabricEndGetActivationContext(long)
- uid: system.fabric._fabric_runtime.FabricGetActivationContext()
- uid: system.fabric._fabric_runtime.FabricRuntime()
- uid: system.fabric._fabric_runtime.FabricRuntime(CodePackageActivationContext)
- uid: system.fabric._fabric_runtime.FabricRuntime(CodePackageActivationContext,Runnable)
- uid: system.fabric._fabric_runtime.GetNodeContext()
- uid: system.fabric._fabric_runtime.RegisterStatefulServiceFactory(long,long,String,JServiceFactoryBroker)
- uid: system.fabric._fabric_runtime.RegisterStatelessServiceFactory(long,long,String,JServiceFactoryBroker)
- uid: system.fabric._fabric_runtime.ReleaseFabricRuntime(long)
- uid: system.fabric._code_package_activation_context
  parent: system.fabric
  href: system.fabric._code_package_activation_context.yml
  name: CodePackageActivationContext
  fullName: system.fabric.CodePackageActivationContext
  type: Class
  summary: <p>Represents activation context for the Service Fabric service. This is valid for fabric activated service only. </p>
  syntax:
    content: public class CodePackageActivationContext
- uid: system.fabric._node_context
  parent: system.fabric
  href: system.fabric._node_context.yml
  name: NodeContext
  fullName: system.fabric.NodeContext
  type: Class
  summary: <p>Class to encapsulate a node context. </p>
  syntax:
    content: public class NodeContext
- uid: system.fabric.interop._native_async_callback
  parent: system.fabric.interop
  href: system.fabric.interop._native_async_callback.yml
  name: NativeAsyncCallback
  fullName: system.fabric.interop.NativeAsyncCallback
  type: Interface
  syntax:
    content: public interface NativeAsyncCallback
- uid: system.fabric._fabric_runtime
  parent: system.fabric
  href: system.fabric._fabric_runtime.yml
  name: FabricRuntime
  fullName: system.fabric.FabricRuntime
  type: Class
  summary: <p>Allows user created hosts to obtain their <xref href="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false"></xref>, well as to register the necessary service factories [ <xref href="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false"></xref>, <xref href="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false"></xref> ] or service types directly. </p>
  syntax: *o1
- uid: system.fabric._stateless_service_factory
  parent: system.fabric
  href: system.fabric._stateless_service_factory.yml
  name: StatelessServiceFactory
  fullName: system.fabric.StatelessServiceFactory
  type: Interface
  summary: >-
    <p>Represents a stateless service factory that is responsible for creating instances of a specific type of stateless service. </p>

    <p>

      <bold>Remarks:</bold>Stateless service factories are registered with the <xref href="system.fabric._fabric_runtime" data-throw-if-not-resolved="false"></xref> by service hosts via <ref refid="" kindref="compound">system.fabric.FabricRuntime#registerStatelessServiceFactory(java.lang.String,system.fabric.StatelessServiceFactory)</ref> or <ref refid="" kindref="compound">system.fabric.FabricRuntime#registerStatelessServiceFactoryAsync(java.lang.String,system.fabric.StatelessServiceFactory,java.time.Duration)</ref></p>
  syntax:
    content: public interface StatelessServiceFactory
- uid: system.fabric._stateful_service_factory
  parent: system.fabric
  href: system.fabric._stateful_service_factory.yml
  name: StatefulServiceFactory
  fullName: system.fabric.StatefulServiceFactory
  type: Interface
  summary: <p>Represents a stateful service factory that is responsible for creating replicas of a specific type of stateful service. Stateful service factories are registered with the <xref href="system.fabric._fabric_runtime" data-throw-if-not-resolved="false"></xref> by service hosts via <ref refid="" kindref="compound">system.fabric.FabricRuntime#registerStatefulServiceFactory(java.lang.String,system.fabric.StatefulServiceFactory)</ref> or <ref refid="" kindref="compound">system.fabric.FabricRuntime#registerStatefulServiceFactoryAsync(java.lang.String,system.fabric.StatefulServiceFactory,java.time.Duration)</ref></p>
  syntax:
    content: public interface StatefulServiceFactory
